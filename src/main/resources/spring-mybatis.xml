<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- druid 日志 filter -->
	<bean id="log4j-filter" class="com.alibaba.druid.filter.logging.Log4jFilter" />

	<!-- druid sql防火墙 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="oracle" />
	</bean>
	<bean id="wall-filter-mysql" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
	</bean>

	<!-- druid 监控filter -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!--慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL -->
		<property name="slowSqlMillis" value="3000" />
		<!--慢SQL统计日志输出 -->
		<property name="logSlowSql" value="true" />
		<!--合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table 
			t where t.id =？来统计 -->
		<property name="mergeSql" value="false" />
	</bean>
	
	<!-- 配置数据源 -->
	<bean name="default" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc1.url}" />
		<property name="username" value="${jdbc1.username}" />
		<property name="password" value="${jdbc1.password}" />
		<property name="initialSize" value="${jdbc1.initialSize}" />	<!-- 初始化时建立物理连接的个数 -->
		<property name="maxActive" value="${jdbc1.maxActive}" />	<!-- 最大连接池数量 -->
		<property name="minIdle" value="0" />	<!-- 已经不再使用，配置了也没效果 -->
		<property name="maxWait" value="60000" />

		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testOnBorrow" value="false" />	<!-- 申请连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />	<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testWhileIdle" value="true" />	<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="100"></property>

		<!-- 关闭长时间不使用的连接 -->
		<property name="removeAbandoned" value="true" />	<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" />	<!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" />	<!-- 关闭abanded连接时输出错误日志 -->

		<!-- 配置监控统计拦截的filters -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log4j-filter" />
			</list>
		</property>
	</bean>
	
	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>cn.wchwu.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- 多数据源配置 如果需要配置多数据： 
		1.在上面节点中增加一个数据源的bean配置 
		2. 在下面的targetDataSources的map中增加一个entry ，entry中的key即程序中用到的数据源名称
	-->
	<bean id="multipleDataSource" class="cn.wchwu.framework.spring.support.MultipleDataSource">
		<property name="defaultTargetDataSource" ref="default" />
		<property name="targetDataSources">
			<map>
				<entry value-ref="default" key="default" />
			</map>
		</property>
	</bean>

	<bean id="customInterceptor" class="cn.wchwu.framework.mybatis.CustomInterceptor" />
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource" />
		<property name="plugins">
			<array>
				<ref bean="customInterceptor" />
			</array>
		</property>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:mybatis/**/*.xml" />
		<property name="typeAliasesPackage" value="cn.wchwu.model"></property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.wchwu.dao" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource" />
	</bean>

	<!-- 拦截器方式配置事物     PROPAGATION_REQUIRED（加入已有事务） -->
	<!-- 
		Propagation ：　　
		key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。
		有以下选项可供使用：
			PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
			PROPAGATION_SUPPORTS  支持当前事务，如果当前没有事务，就以非事务方式执行。
			PROPAGATION_MANDATORY  支持当前事务，如果当前没有事务，就抛出异常。
			PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。
			PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
			PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。
	 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="move*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair*" propagation="REQUIRED" />
			<tx:method name="rebuild*" propagation="REQUIRED" />
			<tx:method name="call*" propagation="REQUIRED" />
			<tx:method name="delAndRepair*" propagation="REQUIRED" />

			<!-- PROPAGATION_NOT_SUPPORTED（非事务方式） -->
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			
			<!-- 日志记录操作：新建事务，如果当前存在事务，就把当前事务挂起 -->
			<tx:method name="log*" propagation="REQUIRES_NEW" />
			

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务 切入点 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* cn.wchwu.service..*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

</beans>